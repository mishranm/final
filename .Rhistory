mydata<-getGEO('GSE87823', GSEMatrix = TRUE, AnnotGPL = TRUE, destdir = "C:/Users/Narad Mishra/Desktop/project/new")
library(clusterProfiler)
library(Biobase)
library(limma)
library(GEOquery)
library(affy)
library(arrayQualityMetrics)
library(AnnotationDbi)
library(topGO)
library(devtools)
library(sva)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(pander)
library(scatterplot3d)
library(KEGGREST)
library(DT)
mydata<-getGEO('GSE87823', GSEMatrix = TRUE, AnnotGPL = TRUE, destdir = "C:/Users/Narad Mishra/Desktop/project/new")
mydata<-getGEO(filename = "C:/Users/Narad Mishra/Desktop/project/new/GSE87823_series_matrix.txt.gz", destdir = ".")
edata<-exprs(mydata)      #expression matrix from series data
pheno<-pData(mydata)      #pheno data
#the above phenodata will be used to get information for batch effect.
library(hgu133a.db)
annotation(mydata)<-"hgu133a.db"
f.edata <- nsFilter(mydata, require.entrez = TRUE, require.GOBP = TRUE,
require.GOCC = TRUE, require.GOMF = TRUE, require.CytoBand = FALSE,
remove.dupEntrez = TRUE, var.func = IQR, var.cutoff = 0.5, var.filter = TRUE,
filterByQuantile = TRUE, feature.exclude = "^AFFX")
f.edata$filter.log
filteredset <- f.edata$eset  # The new ExpressionSet
# group names for all samples in a series
#partial code taken from Geo2R
gsms <- "1111111111111111111111111110000000000000000000000"    # 1 being control and 0 being heroin users
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
filteredset$description <- fl
design <- model.matrix(~ description + 0, filteredset)
colnames(design) <- levels(fl)
fit <- lmFit(filteredset, design)
cont.matrix <- makeContrasts(GG1-GG0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tT <- topTable(fit2, n=Inf, adjust.method ="fdr", p.value=0.05)
#datatable(tT)
tT[order(tT$adj.P.Val),]
top10<-tT[1:10,]
fit2 <- eBayes(fit2)
fit2 <- eBayes(fit2)
fit2 <- eBayes(fit2)
tT <- topTable(fit2, n=Inf, adjust.method ="fdr", p.value=0.05)
tT<-tT[order(tT$adj.P.Val),]
top10<-tT[1:10,]
gsms <- "1111111111111111111111111110000000000000000000000"    # 1 being control and 0 being heroin users
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
filteredset$description <- fl
design <- model.matrix(~ description + 0, filteredset)
colnames(design) <- levels(fl)
fit <- lmFit(filteredset, design)
cont.matrix <- makeContrasts(GG1-GG0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tT <- topTable(fit2, n=Inf, adjust.method ="fdr", p.value=0.05)
datatable(tT)
tT[order(tT$adj.P.Val),]
top10<-tT[1:10,]
vars <- c("ID","adj.P.Val","P.Value","t","logFC","Gene.Symbol","Gene.Title")
topten<-top10[,colnames(top10) %in% vars]
# Matching the Id with expression matrix
edata1<-data.frame(edata)
edata1$probeid<-rownames(edata1)
top10gene<-semi_join(edata1, topten, by=c("probeid"="ID"))
rownames(top10gene)<-top10gene$probeid
top10gene$probeid<-NULL
# Boxplot of ten most differentially expressed gene
boxplot(top10gene, col=mycols, las=3, cex.axis=0.5, names=colnames(expset))
gsms <- "1111111111111111111111111110000000000000000000000"    # 1 being control and 0 being heroin users
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
sml <- paste("G", sml, sep="")
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
filteredset$description <- fl
design <- model.matrix(~ description + 0, filteredset)
colnames(design) <- levels(fl)
fit <- lmFit(filteredset, design)
cont.matrix <- makeContrasts(GG1-GG0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
tT <- topTable(fit2, n=Inf, adjust.method ="fdr", p.value=0.05)
#datatable(tT)
tT<-tT[order(tT$adj.P.Val),]
top10<-tT[1:10,]
vars <- c("ID","adj.P.Val","P.Value","t","logFC","Gene.Symbol","Gene.Title")
topten<-top10[,colnames(top10) %in% vars]
# Matching the Id with expression matrix
edata1<-data.frame(edata)
edata1$probeid<-rownames(edata1)
top10gene<-semi_join(edata1, topten, by=c("probeid"="ID"))
rownames(top10gene)<-top10gene$probeid
top10gene$probeid<-NULL
# Boxplot of ten most differentially expressed gene
boxplot(top10gene, col=mycols, las=3, cex.axis=0.5, names=colnames(expset))
eset<-rma(affy1)
files<-list.celfiles() #provided the cel.files are present in working directory
datDir <- "C:/Users/Narad Mishra/Desktop/project/new"
files<-list.celfiles(path=datDir) #provided the cel.files are present in working directory
affy1<-ReadAffy(filenames = files,celfile.path=datDir)
hist(affy1, lty=rep(1,49), col=mycols)
##Quality Control
library("RColorBrewer")
usr.col=brewer.pal(9, "Set1")
mycols=rep(usr.col,each=3)
boxplot(log2(edata), col=mycols, las=3, cex.axis=0.5, names=colnames(edata))
hist(log((edata)[,1],2))
files<-list.celfiles() #provided the cel.files are present in working directory
datDir <- "C:/Users/Narad Mishra/Desktop/project/new"
files<-list.celfiles(path=datDir) #provided the cel.files are present in working directory
affy1<-ReadAffy(filenames = files,celfile.path=datDir)
hist(affy1, lty=rep(1,49), col=mycols)
legend("topright",rownames(pData(affy1)),lty=rep(1,49), col=mycols, cex=0.6)
#accessing the boxplots
boxplot(affy1, col=mycols, las=3, cex.axis=0.5, names=colnames(edata))
eset<-rma(affy1)
#this performs background correction, quantile normalize, and calculates expression set (summarize using median polish)
expset<-exprs(eset) #get the expression estimates for each array
#accessing the boxplot after normalization. (look the same as the plot for mydata)
boxplot(expset, col=mycols, las=3, cex.axis=0.5, names=colnames(expset))
batch=pheno$source_name_ch1
modcombat <- model.matrix(~1, data = pheno)
mod <- model.matrix(~source_name_ch1, data = pheno)
combat_edata <- ComBat(dat = edata, mod = modcombat, batch=batch,par.prior = TRUE,
prior.plots = FALSE)
combat_fit <- lm.fit(mod, t(combat_edata))
combat_fit <- lmFit(combat_edata, mod)
#Applying SVA method
sva1 <- sva(edata, mod , modcombat, n.sv = 2)
summary(lm(sva1$sv ~ pheno$source_name_ch1))
boxplot(sva1$sv[, 2] ~ pheno$source_name_ch1)
